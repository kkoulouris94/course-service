openapi: 3.0.3
info:
  title: Course API
  description: |-
    This is a sample Academy Server based on the OpenAPI 3.0 specification. This document
    describes all the operations that can be done on all courses entities.
  termsOfService: http://swagger.io/terms/
  contact:
    email: k.koulouris30@gmail.com
  version: 1.0.0
servers:
  - url: http://localhost:8080
tags:
  - name: course
    description: Operations about academy courses
paths:
  /course:
    get:
      tags:
        - course
      summary: Fetch All Courses
      description: Fetch All Courses of Academy
      operationId: index
      responses:
        '200':
          description: Successful Operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
    post:
      tags:
        - course
      summary: Create course
      description: Create a new course instance
      operationId: store
      requestBody:
        description: Created course object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourse'
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '406':
          description: 'Only application/json content type is allowed.'
        '422':
          description: 'Validation exception'
  /course/{id}:
    get:
      tags:
        - course
      summary: Fetch One Course
      description: Returns a single course entity
      operationId: show
      parameters:
        - name: id
          in: path
          description: ID of course
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: Course Not Found
    put:
      tags:
        - course
      summary: Update one course
      operationId: update
      parameters:
        - name: id
          in: path
          description: ID of course that needs to be updated
          required: true
          schema:
            type: integer
            format: int32
      requestBody:
        description: Update an existing course entity
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourse'
      responses:
        '201':
          description: Successful update of entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
        '400':
          description: 'Invalid ID supplied or course title is already taken'
        '404':
          description: 'Course Not Found'
        '406':
          description: 'Only application/json content type is allowed.'
        '422':
          description: 'Validation Exception'
    delete:
      tags:
        - course
      summary: Delete a course
      description: Delete a course
      operationId: delete
      parameters:
        - name: id
          in: path
          description: Course ID to delete
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '204':
          description: Successful deletion of course
        '400':
          description: 'Invalid ID supplied'
        '404':
          description: 'Course Not Found'
components:
  schemas:
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        title:
          type: string
          example: 'Event-Driven Microservices: Spring Boot, Kafka and Elastic'
        description:
          type: string
          example: 'Master event-driven microservices architecture with patterns using Spring boot, Spring cloud, Kafka and Elasticsearch'
        status:
          type: string
          enum:
            - Published
            - Pending
        is_premium:
          type: boolean
        created_at:
          type: string
          format: date-time
        deleted_at:
          type: string
          format: date-time
    CreateCourse:
      type: object
      properties:
        title:
          type: string
          example: 'Event-Driven Microservices: Spring Boot, Kafka and Elastic'
        description:
          type: string
          example: 'Master event-driven microservices architecture with patterns using Spring boot, Spring cloud, Kafka and Elasticsearch'
        status:
          type: string
          enum:
            - Published
            - Pending
        is_premium:
          type: boolean
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        data:
          type: string
  requestBodies:
    Course:
      description: Course object that needs to be added to the academy
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCourse'
    CourseArray:
      description: List of course object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Course'
